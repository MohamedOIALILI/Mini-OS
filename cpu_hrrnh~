#include<stdio.h>
struct process_hrrn
{
 char name;
 int at_hrrn,bt_hrrn,ct_hrrn,wt_hrrn,tt_hrrn;
 int completed;
 float ntt_hrrn;
}p_hrrn[10];
int n;
void sortByArrival_hrrn()
{
struct process_hrrn temp;
int i,j;
for(i=0;i<n-1;i++)
for(j=i+1;j<n;j++)
{
 if(p_hrrn[i].at_hrrn>p[j].at_hrrn)
 {
  temp=p_hrrn[i];
  p_hrrn[i]=p_hrrn[j];
  p_hrrn[j]=temp;
 }
}
}
void HRRN()
{
 int i,j,time,sum_bt=0;
 char c;
        float avgwt=0;
 printf("Enter no of processes:");
 scanf("%d",&n);
 for(i=0,c='A';i<n;i++,c++)
 {
 p[i].name=c;
 printf("\nEnter the arrival time and burst time of process%c: ",p[i].name);
 scanf("%d%d",&p[i].at,&p[i].bt);
 p[i].completed=0;
 sum_bt+=p[i].bt;

}
sortByArrival();

printf("\nName\tArrival Time\tBurst Time\tWaiting Time\tTurnAround Time\t Normalized TT");
  for(time=p[0].at;time<sum_bt;)
  {
  
   float hrr=-9999;
   int loc;
  for(i=0;i<n;i++)
  {
  
   if(p[i].at<=time && p[i].completed!=1)
            {
              float temp=(p[i].bt + (time-p[i].at))/p[i].bt;
              if(hrr < temp)
               {
                hrr=temp;
                loc=i;
               }
          
   }
   }
  
  
   time+=p[loc].bt; 
   p[loc].wt=time-p[loc].at-p[loc].bt;
   p[loc].tt=time-p[loc].at;
   p[loc].ntt=((float)p[loc].tt/p[loc].bt);
   p[loc].completed=1;
   avgwt+=p[loc].wt;
printf("\n%c\t\t%d\t\t%d\t\t%d\t\t%d\t\t%f",p[loc].name,p[loc].at,p[loc].bt,p[loc].wt,p[loc].tt,p[loc].ntt);
  }

printf("\nAverage waiting time:%f\n",avgwt/n);
}
